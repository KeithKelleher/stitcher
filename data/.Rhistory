function(dictpath){
if(!hasArg(dictpath)){
dictpath<-
tk_choose.files(default = getwd()
,caption = "Choose the dictionary file."
,multi=FALSE
,filters=matrix(c("Text", ".txt")
,nrow = 1
,ncol=2
,byrow = TRUE))
}
dict<-
tryCatch({
dictpath %>%
read.delim(header = TRUE
,sep = "\t"
,check.names = FALSE)
}
,error=function(e){
tk_messageBox(type="ok"
,icon="error"
,message=paste("Something went wrong when trying to open the dictionary file:"
,basename(dictpath)
,"The program will abort."
,sep="\n")
,caption="Problem with Dictionary")
return(NA)
})
return(dict)
}
dict<-get_dict()
dict %>% nrow
length(dict$`Original Column Name` %>% unique)
dict[dict$`Original Column Name` %in% duplicated(dict$`Original Column Name`),]
dict[dict$`Original Column Name` %in% dict$`Original Column Name`[duplicated(dict$`Original Column Name`)],]
dict[dict$`Original Column Name` %in% dict$`Original Column Name`[duplicated(dict$`Original Column Name`)],] %>% View
dict[dict$`Original Column Name` %in% dict$`Original Column Name`[duplicated(dict$`Original Column Name`)],] %>% arrange(`Original Column Name`) %>% View
dict[dict$`Original Column Name` %in% dict$`Original Column Name`[duplicated(dict$`Original Column Name`)],] %>% arrange(`Original Column Name`) %>% View
unique(dict) %>% nrow
get_dict<-
function(dictpath){
if(!hasArg(dictpath)){
dictpath<-
tk_choose.files(default = getwd()
,caption = "Choose the dictionary file."
,multi=FALSE
,filters=matrix(c("Text", ".txt")
,nrow = 1
,ncol=2
,byrow = TRUE))
}
dict<-
tryCatch({
dictpath %>%
read.delim(header = TRUE
,sep = "\t"
,check.names = FALSE) %>%
unique
}
,error=function(e){
tk_messageBox(type="ok"
,icon="error"
,message=paste("Something went wrong when trying to open the dictionary file:"
,basename(dictpath)
,"The program will abort."
,sep="\n")
,caption="Problem with Dictionary")
return(NA)
})
return(dict)
}
dict<-get_dict()
dict[dict$`Original Column Name` %in% dict$`Original Column Name`[duplicated(dict$`Original Column Name`)],] %>% arrange(`Original Column Name`) %>% View
dict[duplicated(dict$`Original Column Name`)]
dict[duplicated(dict$`Original Column Name`),]
?data.frame
?mapvalues
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
process_all()
qc_df<-
data.frame(cols2keep() %in% colnames(mtcars))
qc_df
qc_df<-
data.frame(as.list(cols2keep() %in% colnames(mtcars)))
qc_df
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
folder="D:\Dropbox\Rancho\_projects\2018-08-13 MJFF change columns\rumi\PPMI_test"
folder="D:/Dropbox/Rancho/_projects/2018-08-13 MJFF change columns/rumi/PPMI_test"
dictpath="D:/Dropbox/Rancho/_projects/2018-08-13 MJFF change columns/_source/Data_Dictionary_for_BC_PPMI.txt"
outdir<-
folder
files<-
list.files(folder
,full.names = TRUE
,pattern="\\.txt$|\\.csv$")
files
filepath=files[1]
fileext<-
filepath %>%
get_file_ext
fileext
if(fileext=="txt"){
sep<-
"\t"
}else if(fileext=="csv"){
sep<-
","
}else{
stop("get_colums_onefile: file "
,filepath
,"has an unsupported file type. Supported file types are 'txt' and 'csv'.")
}
sep
filedf<-
filepath %>%
read.delim(header = TRUE
,sep = sep
,na.strings = ""
,check.names = FALSE) %>%
.[colnames(.) %in% cols2keep()]
filedf
qc_df<-
data.frame(as.list(cols2keep() %in% colnames(filedf)))
colnames(qc_df)<-
cols2keep()
qc_df
dict<-
dict[dict$`Original Column Name` %in% colnames(filedf),]
message(dict$`Original Column Name`)
dict<-
get_dict(dictpath)
dict
dictpath
get_dict(dictpath)
dict<-
dict[dict$`Original Column Name` %in% colnames(filedf),]
message(dict$`Original Column Name`)
dict<-
get_dict(dictpath)
dict$`Original Column Name` %in% colnames(filedf)
dict[dict$`Original Column Name` %in% colnames(filedf),]
dict[tolower(dict$`Original Column Name`) %in% tolower(colnames(filedf)),]
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
colnames(filedf)
filedf<-
filepath %>%
read.delim(header = TRUE
,sep = sep
,na.strings = ""
,check.names = FALSE) %>%
.[colnames(.) %in% cols2keep()]
colnames(filedf)
dict
identical(dict$`Original Column Name`,tolower(trimws(dict$`Original Column Name`)))
identical(dict$`Original Column Name`,trimws(dict$`Original Column Name`))
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
filedf
colnames(filedf)
#read the file
filedf<-
filepath %>%
read.delim(header = TRUE
,sep = sep
,na.strings = ""
,check.names = FALSE)
#preprocess column names
colnames(filedf)<-
colnames(filedf) %>%
tolower %>%
trimws
#log common columns
log_df<-
data.frame(as.list(cols2keep() %in% colnames(filedf)))
colnames(log_df)<-
cols2keep()
log_df
#pre-process dictionary (keep only replaceable columns)
dict$`Original Column Name`<-
dict$`Original Column Name` %>%
tolower %>%
trimws
dict
dict$`Original Column Name`
dict<-
dict[dict$`Original Column Name` %in% colnames(filedf),]
dict
nrow(dict)
#log how many cols will be replaced
log_df$replaced_columns_total<-
nrow(dict)
#a list of unique domain names
domain_names<-
dict$Domain %>%
unique
domain_names
#log domain names
log_df$domains<-
paste(domain_names
,collapse="|")
log_df
filedf<-
filedf[colnames(filedf) %in% c(cols2keep()
,dict$`Variable Query Name`),]
filedf
filedf<-
filepath %>%
read.delim(header = TRUE
,sep = sep
,na.strings = ""
,check.names = FALSE)
#preprocess column names
colnames(filedf)<-
colnames(filedf) %>%
tolower %>%
trimws
#log common columns
log_df<-
data.frame(as.list(cols2keep() %in% colnames(filedf)))
colnames(log_df)<-
cols2keep()
#pre-process dictionary (keep only replaceable columns)
dict$`Original Column Name`<-
dict$`Original Column Name` %>%
tolower %>%
trimws
dict<-
dict[dict$`Original Column Name` %in% colnames(filedf),]
#log how many cols will be replaced
log_df$replaced_columns_total<-
nrow(dict)
#a list of unique domain names
domain_names<-
dict$Domain %>%
unique
if(length(domain_names) < 1){
domain_names<-""
}
#log domain names
log_df$domains<-
paste(domain_names
,collapse="|")
#replace column names
colnames(filedf)<-
colnames(filedf) %>%
mapvalues(from=dict$`Original Column Name`
,to=dict$`Variable Query Name`)
filedf[colnames(filedf) %in% c(cols2keep()
,dict$`Variable Query Name`)]
dim( filedf[colnames(filedf) %in% c(cols2keep()
,dict$`Variable Query Name`)])
colnames( filedf[colnames(filedf) %in% c(cols2keep()
,dict$`Variable Query Name`)])
colnames(filedf)
log_df$followups.submitter_id<-
"OK"
filedf$followups.submitter_id<-
tryCatch({
paste(filedf$SUBJ_ID
,filedf$VISIT_NAME
,sep="-")
}
,error=function(e){
log_df$followups.submitter_id<-
"BLANKS (check SUBJ_ID and VISIT_NAME"
message(basename(filepath)
,":\n"
,qc)
return("")
})
get_dict()
filedf$followups.submitter_id<-
tryCatch({
paste(filedf$SUBJ_ID
,filedf$VISIT_NAME
,sep="-")
}
,error=function(e){
log_df$followups.submitter_id<-
"BLANKS (check SUBJ_ID and VISIT_NAME"
message(basename(filepath)
,":\n"
,qc)
return("")
})
filedf$followups.submitter_id<-
tryCatch({
paste(filedf$SUBJ_ID
,filedf$VISIT_NAME
,sep="-")
}
,error=function(e){
tk_messageBox(type="ok"
,icon="error"
,message=paste("Something went wrong when trying to open the dictionary file:"
,basename(dictpath)
,"The program will abort."
,sep="\n")
,caption="Problem with Dictionary")
log_df$followups.submitter_id<-
"BLANKS (check SUBJ_ID and VISIT_NAME"
message(basename(filepath)
,":\n"
,qc)
return("")
})
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
?write.table
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
filedf$SUBJ_ID
filedf$VISIT_NAME
tryCatch({
paste(filedf$SUBJ_ID
,filedf$VISIT_NAME
,sep="-")
}
,error=function(e){
log_df$followups.submitter_id<-
"BLANKS (check SUBJ_ID and VISIT_NAME"
message(basename(filepath)
,":\n"
,qc)
return("")
})
asename(filepath)
message(basename(filepath)
,":\n"
,qc)
tryCatch({
paste(filedf$SUBJ_ID
,filedf$VISIT_NAME
,sep="-")
}
,error=function(e){
log_df$followups.submitter_id<-
"BLANKS (check SUBJ_ID and VISIT_NAME"
message(basename(filepath)
,":\n"
,qc)
return("")
})
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns.R')
dict_list<-
dict$Domain %>%
unique %>%
lapply(FUN=function(dom){
dict[df$Domain %in% ]
})
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns_v2.R')
folder = "D:/Dropbox/Rancho/_projects/2018-08-13 MJFF change columns/rumi/PPMI_test"
dictpath = "D:/Dropbox/Rancho/_projects/2018-08-13 MJFF change columns/rumi/Data_Dictionary_for_BC_PPMI_edIG.txt"
dict<-
get_dict()
dict<-
get_dict(dictpath)
outdir<-
file.path(folder
,"new_columns")
files<-
list.files(folder
,full.names = TRUE
,pattern="\\.txt$|\\.csv$")
filepath=files[1]
filepath
cols2keep<-
cols2keep()
#get file extension/type
fileext<-
filepath %>%
get_file_ext
cols2keep()
#get file extension/type
fileext<-
filepath %>%
get_file_ext
if(fileext=="txt"){
sep<-
"\t"
}else if(fileext=="csv"){
sep<-
","
}else{
stop("get_colums_onefile: file "
,filepath
,"has an unsupported file type. Supported file types are 'txt' and 'csv'.")
}
#read the file
filedf<-
filepath %>%
read.delim(header = TRUE
,sep = sep
,na.strings = ""
,check.names = FALSE)
#log common columns
log_df<-
data.frame(as.list(c(basename(filepath)
,cols2keep %in% colnames(filedf))))
colnames(log_df)<-
c("filename"
,cols2keep)
#onto replacement
#keep only usable part of the dictionary
dict<-
dict[dict$`Original Column Name` %in% colnames(filedf),]
dict
colnames(filedf) %>%
mapvalues(from=dict$`Original Column Name`
,to=dict$`Variable Query Name`)
#replace columns
colnames(filedf)<-
colnames(filedf) %>%
mapvalues(from=dict$`Original Column Name`
,to=dict$`Variable Query Name`)
#make a list of columns to keep per domain
cols4domain_list<-
get_cols4domain_list(dict
,cols2replace=colnames(filedf)[!colnames(filedf) %in% cols2keep])
cols4domain_list
colnames(filedf)[!colnames(filedf) %in% cols2keep]
cols4domain_list %>%
map_int(length) %>%
paste(collapse="|")
#log how many cols were replaced per domain
log_df$replaced_columns_per_domain<-
cols4domain_list %>%
map_int(length) %>%
paste(collapse="|")
#log domain names
log_df$domains<-
names(cols4domain_list) %>%
paste(collapse="|")
#add domain placeholder
filedf$Domain<-
""
#add submitter id
submitter_id<-
paste(filedf$SUBJ_ID
,filedf$VISIT_NAME
,sep="-")
if(length(submitter_id) > 0){
filedf$followups.submitter_id<-
submitter_id
log_df$followups.submitter_id<-
"OK"
} else {
filedf$followups.submitter_id<-
""
log_df$followups.submitter_id<-
"BLANKS (check SUBJ_ID and VISIT_NAME)"
}
cols4domain_list
cols2write<-
c(cols2keep
,cols4domain_list[[domain]]
,"followups.submitter_id"
,"Domain")
domain=names(cols4domain_list)[1]
filedf$Domain<-
domain
head(filedf)
cols2write<-
c(cols2keep
,cols4domain_list[[domain]]
,"followups.submitter_id"
,"Domain")
cols2write
source('D:/Dropbox/_R_code/_R_code_Rancho/2018-08-13_MJFF_change_columns/2018-08-13_MJFF_change_columns_v2.R')
message("Processing file "
,basename(filepath))
require(RIGessentials)
require(tidyverse)
require(openxlsx)
prepareSession("D:/git/stitcher/data/")
filenames<-
c("spl_acti_rem.txt"
,"spl_acti_rx.txt"
,"spl_acti_otc.txt")
#current statuses
statuses<-
file.path("dev_status_logic.txt") %>%
read.delim(sep = "\t"
,check.names = FALSE
,strip.white = TRUE)
statuses
################### make a fresh devstatus data table from spl directly
ddt<-
filenames %>%
lapply(read.delim
,sep = "\t"
,check.names = FALSE
,strip.white = TRUE) %>%
do.call(rbind.data.frame
,.) %>%
dplyr::select(MarketingStatus
,ProductType=ProductCategory
,Comment) %>%
unique
